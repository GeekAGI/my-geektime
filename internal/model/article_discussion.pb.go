// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: article_discussion.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ArticleCommentDiscussion
type ArticleCommentDiscussion struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;autoIncrement;comment:id"`
	// cid
	Cid int64 `protobuf:"varint,2,opt,name=cid,proto3" json:"cid,omitempty" gorm:"index;size:128;comment:comment id"`
	// discussion id
	Did int64 `protobuf:"varint,3,opt,name=did,proto3" json:"did,omitempty" gorm:"unique;size:128;comment:discussion id"`
	// likes number
	LikesNumber int64 `protobuf:"varint,4,opt,name=likes_number,json=likesNumber,proto3" json:"likes_number,omitempty" gorm:"index;comment:like number"`
	// ctime
	Ctime int64 `protobuf:"varint,5,opt,name=ctime,proto3" json:"ctime,omitempty" gorm:"index;comment:ctime"`
	// raw
	Raw []byte `protobuf:"bytes,7,opt,name=raw,proto3" json:"raw,omitempty" gorm:"comment:raw"`
	// status
	Status int32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty" gorm:"default:1;size:2;comment:status 1 normal"`
	// created_at
	CreatedAt int64 `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" gorm:"index;comment:created at"`
	// updated_at
	UpdatedAt int64 `protobuf:"varint,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" gorm:"comment:updated at"`
	// deleted_at
	DeletedAt int64 `protobuf:"varint,22,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty" gorm:"comment:deleted at"`
}

func (m *ArticleCommentDiscussion) Reset()         { *m = ArticleCommentDiscussion{} }
func (m *ArticleCommentDiscussion) String() string { return proto.CompactTextString(m) }
func (*ArticleCommentDiscussion) ProtoMessage()    {}
func (*ArticleCommentDiscussion) Descriptor() ([]byte, []int) {
	return fileDescriptor_18da885790253efa, []int{0}
}
func (m *ArticleCommentDiscussion) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleCommentDiscussion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleCommentDiscussion.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleCommentDiscussion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleCommentDiscussion.Merge(m, src)
}
func (m *ArticleCommentDiscussion) XXX_Size() int {
	return m.Size()
}
func (m *ArticleCommentDiscussion) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleCommentDiscussion.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleCommentDiscussion proto.InternalMessageInfo

func (m *ArticleCommentDiscussion) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetDid() int64 {
	if m != nil {
		return m.Did
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetLikesNumber() int64 {
	if m != nil {
		return m.LikesNumber
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetCtime() int64 {
	if m != nil {
		return m.Ctime
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *ArticleCommentDiscussion) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ArticleCommentDiscussion) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*ArticleCommentDiscussion)(nil), "ArticleCommentDiscussion")
}

func init() { proto.RegisterFile("article_discussion.proto", fileDescriptor_18da885790253efa) }

var fileDescriptor_18da885790253efa = []byte{
	// 472 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xc1, 0x6e, 0xd3, 0x30,
	0x18, 0x80, 0x9b, 0x86, 0x0c, 0x61, 0x76, 0x32, 0x30, 0x99, 0x49, 0xc4, 0x51, 0xc6, 0x21, 0x42,
	0xa3, 0xa5, 0x1b, 0x07, 0xd4, 0xa2, 0x49, 0x0d, 0x48, 0x08, 0x4d, 0xe2, 0x90, 0x23, 0x97, 0xca,
	0x8d, 0xbd, 0x62, 0x91, 0xc4, 0xc5, 0xb1, 0x35, 0xc6, 0x53, 0x70, 0xe0, 0xa1, 0x38, 0xee, 0xc8,
	0x29, 0x82, 0xf6, 0x0d, 0x7c, 0xe2, 0x88, 0x62, 0xa7, 0x05, 0x44, 0x39, 0x25, 0x7f, 0xf4, 0x7d,
	0x5f, 0x7e, 0x47, 0x01, 0x88, 0x48, 0xc5, 0xf3, 0x82, 0xcd, 0x28, 0xaf, 0x73, 0x5d, 0xd7, 0x5c,
	0x54, 0x83, 0xa5, 0x14, 0x4a, 0x1c, 0x3e, 0x5e, 0x70, 0xf5, 0x4e, 0xcf, 0x07, 0xb9, 0x28, 0x87,
	0x0b, 0xb1, 0x10, 0x43, 0xfb, 0x78, 0xae, 0x2f, 0xec, 0x64, 0x07, 0x7b, 0xe7, 0xf0, 0xf8, 0x4b,
	0x00, 0xd0, 0xd4, 0xb5, 0x5e, 0x88, 0xb2, 0x64, 0x95, 0x7a, 0xb9, 0x2d, 0xc2, 0x33, 0xd0, 0xe7,
	0x14, 0x79, 0x91, 0x97, 0xf8, 0xe9, 0xc0, 0x34, 0xf8, 0xd1, 0x42, 0xc8, 0x72, 0x1c, 0x2f, 0x25,
	0x2f, 0x89, 0xbc, 0x3a, 0x67, 0x57, 0x13, 0xa2, 0x95, 0x78, 0x5d, 0xe5, 0x92, 0xb5, 0xe6, 0x24,
	0x77, 0x85, 0x31, 0xa7, 0x71, 0xd6, 0xe7, 0x14, 0x9e, 0x01, 0x3f, 0xe7, 0x14, 0xf5, 0x6d, 0xe0,
	0xd8, 0x34, 0x38, 0x71, 0x01, 0x5e, 0x51, 0xf6, 0x71, 0x52, 0xf3, 0x4f, 0x6c, 0x3c, 0x3a, 0x79,
	0xb6, 0xd5, 0xba, 0x6b, 0xd4, 0xea, 0xad, 0x08, 0x53, 0xe0, 0x53, 0x4e, 0x91, 0x6f, 0xfd, 0x27,
	0xa6, 0xc1, 0xc7, 0xce, 0xd7, 0x15, 0xff, 0xa0, 0xd9, 0xbf, 0x81, 0xdf, 0x1f, 0xc3, 0x35, 0x28,
	0xa7, 0xf0, 0x15, 0xd8, 0x2f, 0xf8, 0x7b, 0x56, 0xcf, 0x2a, 0x5d, 0xce, 0x99, 0x44, 0x37, 0x6c,
	0xec, 0xa1, 0x69, 0x70, 0xf4, 0xe7, 0x32, 0x9b, 0x44, 0xcb, 0x46, 0x0e, 0x8d, 0xb3, 0xdb, 0xd6,
	0x7c, 0x63, 0x27, 0xf8, 0x14, 0x04, 0xb9, 0xe2, 0x25, 0x43, 0x81, 0x2d, 0x84, 0xa6, 0xc1, 0x87,
	0xbb, 0x0a, 0x16, 0x8a, 0x33, 0x07, 0xc3, 0x04, 0xf8, 0x92, 0x5c, 0xa2, 0x9b, 0x91, 0x97, 0xec,
	0xa7, 0x07, 0xa6, 0xc1, 0xd0, 0x39, 0x1b, 0x5a, 0x92, 0xcb, 0x38, 0x6b, 0x11, 0x78, 0x0e, 0xf6,
	0x6a, 0x45, 0x94, 0xae, 0xd1, 0x9d, 0xc8, 0x4b, 0x82, 0xf4, 0xd4, 0x34, 0x78, 0xe8, 0x60, 0xca,
	0x2e, 0x88, 0x2e, 0xd4, 0x78, 0xe4, 0x8e, 0x7c, 0xb2, 0x7d, 0x97, 0x13, 0xa2, 0x51, 0x54, 0x09,
	0x59, 0x92, 0x22, 0xce, 0xba, 0x04, 0x4c, 0x01, 0xc8, 0x25, 0x23, 0x8a, 0xd1, 0x19, 0x51, 0xe8,
	0xae, 0xdd, 0xf8, 0xc8, 0x34, 0x18, 0xef, 0xdc, 0xd8, 0x91, 0x11, 0x51, 0x71, 0x76, 0xab, 0x1b,
	0xa6, 0x0a, 0x3e, 0x07, 0x40, 0x2f, 0xe9, 0xa6, 0x71, 0xcf, 0x36, 0x1e, 0x98, 0x06, 0xdf, 0xff,
	0xfb, 0x04, 0x1d, 0xe3, 0xec, 0x6e, 0x70, 0x36, 0x65, 0x05, 0xeb, 0xec, 0x83, 0xff, 0xd9, 0x1d,
	0xe3, 0xec, 0x6e, 0x98, 0xaa, 0xf4, 0xe8, 0xe7, 0x8f, 0xd0, 0xfb, 0xba, 0x0a, 0xbd, 0xeb, 0x55,
	0xe8, 0x7d, 0x5f, 0x85, 0xde, 0xe7, 0x75, 0xd8, 0xbb, 0x5e, 0x87, 0xbd, 0x6f, 0xeb, 0xb0, 0xf7,
	0x36, 0x28, 0x05, 0x65, 0xc5, 0x7c, 0xcf, 0xfe, 0xc2, 0xa7, 0xbf, 0x02, 0x00, 0x00, 0xff, 0xff,
	0x1a, 0xc9, 0xb3, 0x48, 0x0d, 0x03, 0x00, 0x00,
}

func (m *ArticleCommentDiscussion) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleCommentDiscussion) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleCommentDiscussion) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CreatedAt != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Status != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0x3a
	}
	if m.Ctime != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.Ctime))
		i--
		dAtA[i] = 0x28
	}
	if m.LikesNumber != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.LikesNumber))
		i--
		dAtA[i] = 0x20
	}
	if m.Did != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.Did))
		i--
		dAtA[i] = 0x18
	}
	if m.Cid != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintArticleDiscussion(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArticleDiscussion(dAtA []byte, offset int, v uint64) int {
	offset -= sovArticleDiscussion(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedArticleCommentDiscussion(r randyArticleDiscussion, easy bool) *ArticleCommentDiscussion {
	this := &ArticleCommentDiscussion{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Cid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cid *= -1
	}
	this.Did = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Did *= -1
	}
	this.LikesNumber = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LikesNumber *= -1
	}
	this.Ctime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Ctime *= -1
	}
	v1 := r.Intn(100)
	this.Raw = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Raw[i] = byte(r.Intn(256))
	}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	this.DeletedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DeletedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyArticleDiscussion interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneArticleDiscussion(r randyArticleDiscussion) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringArticleDiscussion(r randyArticleDiscussion) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneArticleDiscussion(r)
	}
	return string(tmps)
}
func randUnrecognizedArticleDiscussion(r randyArticleDiscussion, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldArticleDiscussion(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldArticleDiscussion(dAtA []byte, r randyArticleDiscussion, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateArticleDiscussion(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateArticleDiscussion(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateArticleDiscussion(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateArticleDiscussion(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateArticleDiscussion(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateArticleDiscussion(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateArticleDiscussion(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ArticleCommentDiscussion) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArticleDiscussion(uint64(m.Id))
	}
	if m.Cid != 0 {
		n += 1 + sovArticleDiscussion(uint64(m.Cid))
	}
	if m.Did != 0 {
		n += 1 + sovArticleDiscussion(uint64(m.Did))
	}
	if m.LikesNumber != 0 {
		n += 1 + sovArticleDiscussion(uint64(m.LikesNumber))
	}
	if m.Ctime != 0 {
		n += 1 + sovArticleDiscussion(uint64(m.Ctime))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovArticleDiscussion(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovArticleDiscussion(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovArticleDiscussion(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovArticleDiscussion(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 2 + sovArticleDiscussion(uint64(m.DeletedAt))
	}
	return n
}

func sovArticleDiscussion(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArticleDiscussion(x uint64) (n int) {
	return sovArticleDiscussion(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArticleCommentDiscussion) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticleDiscussion
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleCommentDiscussion: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleCommentDiscussion: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Did", wireType)
			}
			m.Did = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Did |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikesNumber", wireType)
			}
			m.LikesNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikesNumber |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ctime", wireType)
			}
			m.Ctime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Ctime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArticleDiscussion
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleDiscussion
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticleDiscussion(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArticleDiscussion
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArticleDiscussion(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArticleDiscussion
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticleDiscussion
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArticleDiscussion
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArticleDiscussion
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArticleDiscussion
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArticleDiscussion        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArticleDiscussion          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArticleDiscussion = fmt.Errorf("proto: unexpected end of group")
)
