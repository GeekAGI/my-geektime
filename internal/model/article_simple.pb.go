// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: article_simple.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ArticleSimple
type ArticleSimple struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;autoIncrement;comment:id"`
	// aid
	Aid string `protobuf:"bytes,2,opt,name=aid,proto3" json:"aid,omitempty" gorm:"unique;size:128;comment:article id"`
	//  pid
	Pid string `protobuf:"bytes,3,opt,name=pid,proto3" json:"pid,omitempty" gorm:"index;size:128;comment:product pid"`
	// title
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty" gorm:"comment:title"`
	// cover
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty" gorm:"comment:cover"`
	// sort
	Sort int32 `protobuf:"varint,7,opt,name=sort,proto3" json:"sort,omitempty" gorm:"comment:sort"`
	// raw
	Raw []byte `protobuf:"bytes,8,opt,name=raw,proto3" json:"raw,omitempty" gorm:"comment:raw"`
	// status
	Status int32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty" gorm:"default:1;size:2;comment:status 1 normal"`
	// created_at
	CreatedAt int64 `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" gorm:"index;comment:created at"`
	// updated_at
	UpdatedAt int64 `protobuf:"varint,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" gorm:"comment:updated at"`
	// deleted_at
	DeletedAt int64 `protobuf:"varint,22,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty" gorm:"comment:deleted at"`
}

func (m *ArticleSimple) Reset()         { *m = ArticleSimple{} }
func (m *ArticleSimple) String() string { return proto.CompactTextString(m) }
func (*ArticleSimple) ProtoMessage()    {}
func (*ArticleSimple) Descriptor() ([]byte, []int) {
	return fileDescriptor_d110a597d11751e2, []int{0}
}
func (m *ArticleSimple) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleSimple) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleSimple.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleSimple) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleSimple.Merge(m, src)
}
func (m *ArticleSimple) XXX_Size() int {
	return m.Size()
}
func (m *ArticleSimple) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleSimple.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleSimple proto.InternalMessageInfo

func (m *ArticleSimple) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArticleSimple) GetAid() string {
	if m != nil {
		return m.Aid
	}
	return ""
}

func (m *ArticleSimple) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *ArticleSimple) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *ArticleSimple) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *ArticleSimple) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

func (m *ArticleSimple) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *ArticleSimple) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ArticleSimple) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleSimple) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ArticleSimple) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*ArticleSimple)(nil), "ArticleSimple")
}

func init() { proto.RegisterFile("article_simple.proto", fileDescriptor_d110a597d11751e2) }

var fileDescriptor_d110a597d11751e2 = []byte{
	// 467 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x92, 0xb1, 0x8e, 0xd3, 0x30,
	0x18, 0x80, 0x9b, 0x96, 0x14, 0xce, 0x82, 0x25, 0x57, 0x0e, 0x83, 0x44, 0x6c, 0xf9, 0x96, 0x00,
	0xba, 0x56, 0xbd, 0x5b, 0x50, 0x8b, 0x40, 0xcd, 0x86, 0x6e, 0x0b, 0x1b, 0xcb, 0xc9, 0x8d, 0x7d,
	0xc5, 0x52, 0x12, 0x07, 0xc7, 0xe6, 0x38, 0x9e, 0x82, 0x85, 0x77, 0x62, 0xbc, 0x91, 0x29, 0x82,
	0xf6, 0x0d, 0x32, 0x31, 0xa2, 0xd8, 0xb9, 0x8a, 0x82, 0x3a, 0x25, 0x7f, 0xfc, 0x7d, 0x9f, 0xf4,
	0x27, 0x01, 0x23, 0xaa, 0xb4, 0x48, 0x33, 0x7e, 0x51, 0x89, 0xbc, 0xcc, 0xf8, 0xb8, 0x54, 0x52,
	0xcb, 0x27, 0x27, 0x2b, 0xa1, 0x3f, 0x98, 0xe5, 0x38, 0x95, 0xf9, 0x64, 0x25, 0x57, 0x72, 0x62,
	0x1f, 0x2f, 0xcd, 0xa5, 0x9d, 0xec, 0x60, 0xef, 0x1c, 0x4e, 0xbe, 0xf9, 0xe0, 0xc1, 0xc2, 0x75,
	0xde, 0xd9, 0x4c, 0xf0, 0x1a, 0xf4, 0x05, 0x83, 0x1e, 0xf6, 0xa2, 0x41, 0x3c, 0x6e, 0x6a, 0xf4,
	0x7c, 0x25, 0x55, 0x3e, 0x23, 0xa5, 0x12, 0x39, 0x55, 0xd7, 0xe7, 0xfc, 0x7a, 0x4e, 0x8d, 0x96,
	0x6f, 0x8b, 0x54, 0xf1, 0x9c, 0x17, 0x7a, 0x9e, 0xca, 0xbc, 0xbd, 0xce, 0x04, 0x23, 0x49, 0x5f,
	0xb0, 0xe0, 0x0d, 0x18, 0x50, 0xc1, 0x60, 0x1f, 0x7b, 0xd1, 0x41, 0x7c, 0xd2, 0xd4, 0xe8, 0x99,
	0x0b, 0x98, 0x42, 0x7c, 0x34, 0x7c, 0x5e, 0x89, 0x2f, 0x7c, 0x36, 0x3d, 0x7d, 0xb9, 0xf5, 0xba,
	0x2d, 0x70, 0xeb, 0xb7, 0x66, 0x1b, 0x28, 0x05, 0x83, 0x83, 0x7f, 0x03, 0xa2, 0x60, 0xfc, 0xf3,
	0xff, 0x7e, 0xa9, 0x24, 0x33, 0xa9, 0xc6, 0xa5, 0x0d, 0x94, 0x82, 0x05, 0x63, 0xe0, 0x6b, 0xa1,
	0x33, 0x0e, 0x7d, 0x9b, 0x80, 0x4d, 0x8d, 0x46, 0x2e, 0x71, 0xeb, 0xd8, 0x63, 0x92, 0x38, 0xac,
	0xe5, 0x53, 0xf9, 0x89, 0x2b, 0x38, 0xdc, 0xc7, 0xdb, 0x63, 0x92, 0x38, 0x2c, 0x78, 0x01, 0xee,
	0x54, 0x52, 0x69, 0x78, 0x17, 0x7b, 0x91, 0x1f, 0x3f, 0x6a, 0x6a, 0x74, 0xb8, 0x8b, 0xb7, 0xa7,
	0x24, 0xb1, 0x50, 0x10, 0x81, 0x81, 0xa2, 0x57, 0xf0, 0x1e, 0xf6, 0xa2, 0xfb, 0xf1, 0x51, 0x53,
	0xa3, 0x60, 0x97, 0x55, 0xf4, 0x8a, 0x24, 0x2d, 0x12, 0x9c, 0x83, 0x61, 0xa5, 0xa9, 0x36, 0x15,
	0x3c, 0xb4, 0xe1, 0xb3, 0xa6, 0x46, 0x13, 0x07, 0x33, 0x7e, 0x49, 0x4d, 0xa6, 0x67, 0x53, 0xb7,
	0xfe, 0xe9, 0x76, 0x79, 0x27, 0xe0, 0x29, 0x2e, 0xa4, 0xca, 0x69, 0x46, 0x92, 0x2e, 0x11, 0xc4,
	0x00, 0xa4, 0x8a, 0x53, 0xcd, 0xd9, 0x05, 0xd5, 0x70, 0x64, 0xbf, 0xe6, 0x71, 0x53, 0x23, 0xf4,
	0xf7, 0xbb, 0xdc, 0xae, 0xe7, 0x48, 0x4c, 0x35, 0x49, 0x0e, 0xba, 0x61, 0xa1, 0x83, 0x57, 0x00,
	0x98, 0x92, 0xdd, 0x36, 0x1e, 0xda, 0xc6, 0xd3, 0xa6, 0x46, 0x8f, 0x77, 0x37, 0xe8, 0x18, 0x67,
	0x77, 0x83, 0xb3, 0x19, 0xcf, 0x78, 0x67, 0x1f, 0xed, 0xb3, 0x3b, 0xc6, 0xd9, 0xdd, 0xb0, 0xd0,
	0xf1, 0xf1, 0xef, 0x5f, 0xa1, 0xf7, 0x7d, 0x1d, 0x7a, 0x37, 0xeb, 0xd0, 0xfb, 0xb9, 0x0e, 0xbd,
	0xaf, 0x9b, 0xb0, 0x77, 0xb3, 0x09, 0x7b, 0x3f, 0x36, 0x61, 0xef, 0xbd, 0x9f, 0x4b, 0xc6, 0xb3,
	0xe5, 0xd0, 0xfe, 0xc3, 0x67, 0x7f, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa1, 0x31, 0x67, 0xe2, 0x0a,
	0x03, 0x00, 0x00,
}

func (m *ArticleSimple) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleSimple) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleSimple) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != 0 {
		i = encodeVarintArticleSimple(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintArticleSimple(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CreatedAt != 0 {
		i = encodeVarintArticleSimple(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Status != 0 {
		i = encodeVarintArticleSimple(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintArticleSimple(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0x42
	}
	if m.Sort != 0 {
		i = encodeVarintArticleSimple(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x38
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintArticleSimple(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintArticleSimple(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintArticleSimple(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Aid) > 0 {
		i -= len(m.Aid)
		copy(dAtA[i:], m.Aid)
		i = encodeVarintArticleSimple(dAtA, i, uint64(len(m.Aid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintArticleSimple(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArticleSimple(dAtA []byte, offset int, v uint64) int {
	offset -= sovArticleSimple(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedArticleSimple(r randyArticleSimple, easy bool) *ArticleSimple {
	this := &ArticleSimple{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Aid = string(randStringArticleSimple(r))
	this.Pid = string(randStringArticleSimple(r))
	this.Title = string(randStringArticleSimple(r))
	this.Cover = string(randStringArticleSimple(r))
	this.Sort = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sort *= -1
	}
	v1 := r.Intn(100)
	this.Raw = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Raw[i] = byte(r.Intn(256))
	}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	this.DeletedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DeletedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyArticleSimple interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneArticleSimple(r randyArticleSimple) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringArticleSimple(r randyArticleSimple) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneArticleSimple(r)
	}
	return string(tmps)
}
func randUnrecognizedArticleSimple(r randyArticleSimple, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldArticleSimple(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldArticleSimple(dAtA []byte, r randyArticleSimple, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateArticleSimple(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateArticleSimple(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateArticleSimple(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateArticleSimple(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateArticleSimple(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateArticleSimple(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateArticleSimple(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ArticleSimple) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArticleSimple(uint64(m.Id))
	}
	l = len(m.Aid)
	if l > 0 {
		n += 1 + l + sovArticleSimple(uint64(l))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovArticleSimple(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovArticleSimple(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovArticleSimple(uint64(l))
	}
	if m.Sort != 0 {
		n += 1 + sovArticleSimple(uint64(m.Sort))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovArticleSimple(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovArticleSimple(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovArticleSimple(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovArticleSimple(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 2 + sovArticleSimple(uint64(m.DeletedAt))
	}
	return n
}

func sovArticleSimple(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArticleSimple(x uint64) (n int) {
	return sovArticleSimple(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArticleSimple) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticleSimple
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleSimple: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleSimple: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticleSimple
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleSimple
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Aid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticleSimple
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleSimple
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticleSimple
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleSimple
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthArticleSimple
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleSimple
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArticleSimple
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleSimple
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticleSimple(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArticleSimple
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArticleSimple(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArticleSimple
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticleSimple
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArticleSimple
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArticleSimple
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArticleSimple
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArticleSimple        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArticleSimple          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArticleSimple = fmt.Errorf("proto: unexpected end of group")
)
