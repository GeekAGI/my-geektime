// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: sys_dict.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// SysDictBase
type SysDictBase struct {
	// key
	Key string `protobuf:"bytes,2,opt,name=key,proto3" json:"key,omitempty" gorm:"index,unique;comment:key"`
	// pkey
	Pkey string `protobuf:"bytes,3,opt,name=pkey,proto3" json:"pkey,omitempty" gorm:"index;comment:parent key"`
	// rkey
	Rkey string `protobuf:"bytes,4,opt,name=rkey,proto3" json:"rkey,omitempty" gorm:"index;comment:root key"`
	// name
	Name string `protobuf:"bytes,5,opt,name=name,proto3" json:"name,omitempty" gorm:"index;size:100;comment:name"`
	// summary
	Summary string `protobuf:"bytes,6,opt,name=summary,proto3" json:"summary,omitempty" gorm:"type:text;comment:summary"`
	// content
	Content []byte `protobuf:"bytes,7,opt,name=content,proto3" json:"content,omitempty" gorm:"type:text;comment:content"`
	// sort
	Sort int32 `protobuf:"varint,18,opt,name=sort,proto3" json:"sort,omitempty" gorm:"index;default:1;size:6;comment:sort"`
}

func (m *SysDictBase) Reset()         { *m = SysDictBase{} }
func (m *SysDictBase) String() string { return proto.CompactTextString(m) }
func (*SysDictBase) ProtoMessage()    {}
func (*SysDictBase) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c89b6a76d7dcc8b, []int{0}
}
func (m *SysDictBase) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysDictBase) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysDictBase.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysDictBase) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysDictBase.Merge(m, src)
}
func (m *SysDictBase) XXX_Size() int {
	return m.Size()
}
func (m *SysDictBase) XXX_DiscardUnknown() {
	xxx_messageInfo_SysDictBase.DiscardUnknown(m)
}

var xxx_messageInfo_SysDictBase proto.InternalMessageInfo

func (m *SysDictBase) GetKey() string {
	if m != nil {
		return m.Key
	}
	return ""
}

func (m *SysDictBase) GetPkey() string {
	if m != nil {
		return m.Pkey
	}
	return ""
}

func (m *SysDictBase) GetRkey() string {
	if m != nil {
		return m.Rkey
	}
	return ""
}

func (m *SysDictBase) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *SysDictBase) GetSummary() string {
	if m != nil {
		return m.Summary
	}
	return ""
}

func (m *SysDictBase) GetContent() []byte {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *SysDictBase) GetSort() int32 {
	if m != nil {
		return m.Sort
	}
	return 0
}

// SysDict
type SysDict struct {
	// model
	Model *Model `protobuf:"bytes,1,opt,name=model,proto3" json:"model,omitempty" gorm:"embedded"`
	// base
	Base *SysDictBase `protobuf:"bytes,2,opt,name=base,proto3" json:"base,omitempty" gorm:"embedded"`
}

func (m *SysDict) Reset()         { *m = SysDict{} }
func (m *SysDict) String() string { return proto.CompactTextString(m) }
func (*SysDict) ProtoMessage()    {}
func (*SysDict) Descriptor() ([]byte, []int) {
	return fileDescriptor_4c89b6a76d7dcc8b, []int{1}
}
func (m *SysDict) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *SysDict) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_SysDict.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *SysDict) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SysDict.Merge(m, src)
}
func (m *SysDict) XXX_Size() int {
	return m.Size()
}
func (m *SysDict) XXX_DiscardUnknown() {
	xxx_messageInfo_SysDict.DiscardUnknown(m)
}

var xxx_messageInfo_SysDict proto.InternalMessageInfo

func (m *SysDict) GetModel() *Model {
	if m != nil {
		return m.Model
	}
	return nil
}

func (m *SysDict) GetBase() *SysDictBase {
	if m != nil {
		return m.Base
	}
	return nil
}

func init() {
	proto.RegisterType((*SysDictBase)(nil), "SysDictBase")
	proto.RegisterType((*SysDict)(nil), "SysDict")
}

func init() { proto.RegisterFile("sys_dict.proto", fileDescriptor_4c89b6a76d7dcc8b) }

var fileDescriptor_4c89b6a76d7dcc8b = []byte{
	// 418 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0xd2, 0x4f, 0x8b, 0xd3, 0x40,
	0x18, 0x06, 0xf0, 0x8e, 0x4d, 0x5b, 0x9c, 0x2e, 0x0a, 0xe3, 0x25, 0x08, 0x26, 0x71, 0x56, 0x24,
	0x88, 0x66, 0xb7, 0x2b, 0xab, 0x10, 0xc1, 0x43, 0xf0, 0xea, 0x25, 0xde, 0xbc, 0x48, 0xfe, 0xbc,
	0x1b, 0xc3, 0xee, 0x64, 0xe2, 0xcc, 0x04, 0x36, 0x7e, 0x0a, 0x3f, 0x8c, 0x1f, 0xc2, 0x63, 0x8f,
	0x9e, 0x82, 0xb6, 0xdf, 0x20, 0x27, 0x8f, 0x32, 0x93, 0xb4, 0xf6, 0x50, 0xbc, 0xe5, 0x09, 0xcf,
	0x6f, 0x98, 0xe4, 0x7d, 0xf1, 0x3d, 0xd9, 0xca, 0x4f, 0x79, 0x99, 0xa9, 0xa0, 0x16, 0x5c, 0xf1,
	0x87, 0x2f, 0x8a, 0x52, 0x7d, 0x6e, 0xd2, 0x20, 0xe3, 0xec, 0xac, 0xe0, 0x05, 0x3f, 0x33, 0xaf,
	0xd3, 0xe6, 0xca, 0x24, 0x13, 0xcc, 0xd3, 0x58, 0x5f, 0x32, 0x9e, 0xc3, 0xcd, 0x10, 0xe8, 0xf7,
	0x29, 0x5e, 0x7e, 0x68, 0xe5, 0xbb, 0x32, 0x53, 0x51, 0x22, 0x81, 0x5c, 0xe2, 0xe9, 0x35, 0xb4,
	0xf6, 0x1d, 0x0f, 0xf9, 0x77, 0xa3, 0xd3, 0xbe, 0x73, 0xdd, 0x82, 0x0b, 0x16, 0xd2, 0xb2, 0xca,
	0xe1, 0xf6, 0x79, 0x53, 0x95, 0x5f, 0x1a, 0x78, 0x93, 0x71, 0xc6, 0xa0, 0x52, 0xe1, 0x35, 0xb4,
	0x34, 0xd6, 0x7d, 0xf2, 0x1a, 0x5b, 0xb5, 0x76, 0xd3, 0xa3, 0x6e, 0x0f, 0xea, 0x44, 0x40, 0xa5,
	0x3c, 0xe3, 0x0c, 0x20, 0x97, 0xd8, 0x12, 0x1a, 0x5a, 0x06, 0x3e, 0xee, 0x3b, 0xf7, 0xd1, 0x31,
	0x28, 0x38, 0xdf, 0x31, 0x5d, 0x27, 0x21, 0xb6, 0xaa, 0x84, 0x81, 0x3d, 0x33, 0xec, 0x69, 0xdf,
	0xb9, 0xf4, 0x90, 0xc9, 0xf2, 0x2b, 0x84, 0xab, 0xf3, 0xf3, 0xbd, 0xd7, 0x65, 0x1a, 0x1b, 0x43,
	0xde, 0xe2, 0x85, 0x6c, 0x18, 0x4b, 0x44, 0x6b, 0xcf, 0x0d, 0x7f, 0xd2, 0x77, 0xae, 0x37, 0x70,
	0xd5, 0xd6, 0x10, 0x2a, 0xb8, 0x55, 0x7b, 0x39, 0x56, 0x69, 0xbc, 0x43, 0xda, 0x67, 0xbc, 0x52,
	0x50, 0x29, 0x7b, 0xe1, 0x21, 0xff, 0xe4, 0xff, 0x7e, 0xac, 0xd2, 0x78, 0x87, 0x48, 0x84, 0x2d,
	0xc9, 0x85, 0xb2, 0x89, 0x87, 0xfc, 0x59, 0x14, 0xf4, 0x9d, 0xfb, 0xec, 0xf0, 0xee, 0x39, 0x5c,
	0x25, 0xcd, 0x8d, 0x0a, 0x57, 0xc3, 0x57, 0xbc, 0xfa, 0x77, 0x13, 0x2e, 0x14, 0x8d, 0x8d, 0xa5,
	0x12, 0x2f, 0xc6, 0xa9, 0x91, 0x15, 0x9e, 0x99, 0x81, 0xda, 0xc8, 0x43, 0xfe, 0xf2, 0x62, 0x1e,
	0xbc, 0xd7, 0x29, 0x7a, 0xd0, 0x77, 0xee, 0xfd, 0xe1, 0x5c, 0x60, 0x29, 0xe4, 0x39, 0xe4, 0x34,
	0x1e, 0x9a, 0xfa, 0xa7, 0xa7, 0x89, 0x04, 0x33, 0xe5, 0xe5, 0xc5, 0x49, 0x70, 0xb0, 0x00, 0xc7,
	0x9d, 0xa9, 0x47, 0xa7, 0x7f, 0x7e, 0x3b, 0xe8, 0xc7, 0xc6, 0x41, 0xeb, 0x8d, 0x83, 0x7e, 0x6d,
	0x1c, 0xf4, 0x6d, 0xeb, 0x4c, 0xd6, 0x5b, 0x67, 0xf2, 0x73, 0xeb, 0x4c, 0x3e, 0x0e, 0x67, 0xa7,
	0x73, 0xb3, 0x57, 0x2f, 0xff, 0x06, 0x00, 0x00, 0xff, 0xff, 0x68, 0xa1, 0xc7, 0xf9, 0xa5, 0x02,
	0x00, 0x00,
}

func (m *SysDictBase) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysDictBase) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysDictBase) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Sort != 0 {
		i = encodeVarintSysDict(dAtA, i, uint64(m.Sort))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x90
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintSysDict(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Summary) > 0 {
		i -= len(m.Summary)
		copy(dAtA[i:], m.Summary)
		i = encodeVarintSysDict(dAtA, i, uint64(len(m.Summary)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = encodeVarintSysDict(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Rkey) > 0 {
		i -= len(m.Rkey)
		copy(dAtA[i:], m.Rkey)
		i = encodeVarintSysDict(dAtA, i, uint64(len(m.Rkey)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Pkey) > 0 {
		i -= len(m.Pkey)
		copy(dAtA[i:], m.Pkey)
		i = encodeVarintSysDict(dAtA, i, uint64(len(m.Pkey)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Key) > 0 {
		i -= len(m.Key)
		copy(dAtA[i:], m.Key)
		i = encodeVarintSysDict(dAtA, i, uint64(len(m.Key)))
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *SysDict) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SysDict) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *SysDict) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Base != nil {
		{
			size, err := m.Base.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysDict(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Model != nil {
		{
			size, err := m.Model.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintSysDict(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintSysDict(dAtA []byte, offset int, v uint64) int {
	offset -= sovSysDict(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedSysDictBase(r randySysDict, easy bool) *SysDictBase {
	this := &SysDictBase{}
	this.Key = string(randStringSysDict(r))
	this.Pkey = string(randStringSysDict(r))
	this.Rkey = string(randStringSysDict(r))
	this.Name = string(randStringSysDict(r))
	this.Summary = string(randStringSysDict(r))
	v1 := r.Intn(100)
	this.Content = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Content[i] = byte(r.Intn(256))
	}
	this.Sort = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Sort *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

func NewPopulatedSysDict(r randySysDict, easy bool) *SysDict {
	this := &SysDict{}
	if r.Intn(5) != 0 {
		this.Model = NewPopulatedModel(r, easy)
	}
	if r.Intn(5) != 0 {
		this.Base = NewPopulatedSysDictBase(r, easy)
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randySysDict interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneSysDict(r randySysDict) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringSysDict(r randySysDict) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneSysDict(r)
	}
	return string(tmps)
}
func randUnrecognizedSysDict(r randySysDict, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldSysDict(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldSysDict(dAtA []byte, r randySysDict, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateSysDict(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateSysDict(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateSysDict(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateSysDict(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateSysDict(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateSysDict(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateSysDict(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *SysDictBase) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Key)
	if l > 0 {
		n += 1 + l + sovSysDict(uint64(l))
	}
	l = len(m.Pkey)
	if l > 0 {
		n += 1 + l + sovSysDict(uint64(l))
	}
	l = len(m.Rkey)
	if l > 0 {
		n += 1 + l + sovSysDict(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovSysDict(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovSysDict(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovSysDict(uint64(l))
	}
	if m.Sort != 0 {
		n += 2 + sovSysDict(uint64(m.Sort))
	}
	return n
}

func (m *SysDict) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Model != nil {
		l = m.Model.Size()
		n += 1 + l + sovSysDict(uint64(l))
	}
	if m.Base != nil {
		l = m.Base.Size()
		n += 1 + l + sovSysDict(uint64(l))
	}
	return n
}

func sovSysDict(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozSysDict(x uint64) (n int) {
	return sovSysDict(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *SysDictBase) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysDict
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysDictBase: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysDictBase: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Key", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Key = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rkey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rkey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = append(m.Content[:0], dAtA[iNdEx:postIndex]...)
			if m.Content == nil {
				m.Content = []byte{}
			}
			iNdEx = postIndex
		case 18:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Sort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSysDict(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysDict
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SysDict) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSysDict
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SysDict: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SysDict: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Model", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Model == nil {
				m.Model = &Model{}
			}
			if err := m.Model.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Base", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthSysDict
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthSysDict
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Base == nil {
				m.Base = &SysDictBase{}
			}
			if err := m.Base.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSysDict(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthSysDict
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSysDict(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSysDict
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSysDict
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSysDict
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupSysDict
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthSysDict
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthSysDict        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSysDict          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupSysDict = fmt.Errorf("proto: unexpected end of group")
)
