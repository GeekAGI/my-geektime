// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: product.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Product
type Product struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;autoIncrement;comment:id"`
	// pid
	Pid string `protobuf:"bytes,2,opt,name=pid,proto3" json:"pid,omitempty" gorm:"unique;size:128;comment:product id"`
	// uid
	Uid string `protobuf:"bytes,3,opt,name=uid,proto3" json:"uid,omitempty" gorm:"index;size:128;comment:uid"`
	// title
	Title string `protobuf:"bytes,5,opt,name=title,proto3" json:"title,omitempty" gorm:"comment:title"`
	// cover
	Cover string `protobuf:"bytes,6,opt,name=cover,proto3" json:"cover,omitempty" gorm:"comment:cover"`
	// raw
	Raw []byte `protobuf:"bytes,7,opt,name=raw,proto3" json:"raw,omitempty" gorm:"comment:raw"`
	// source
	Source string `protobuf:"bytes,8,opt,name=source,proto3" json:"source,omitempty" gorm:"index;comment:source"`
	// other type
	OtherType int32 `protobuf:"varint,9,opt,name=other_type,json=otherType,proto3" json:"other_type,omitempty" gorm:"index;size:4;comment:other type"`
	// other tag
	OtherTag int32 `protobuf:"varint,10,opt,name=other_tag,json=otherTag,proto3" json:"other_tag,omitempty" gorm:"index;size:4;comment:other tag"`
	// other form
	OtherForm int32 `protobuf:"varint,11,opt,name=other_form,json=otherForm,proto3" json:"other_form,omitempty" gorm:"index;size:4;comment:other form"`
	// other group
	OtherGroup int32 `protobuf:"varint,12,opt,name=other_group,json=otherGroup,proto3" json:"other_group,omitempty" gorm:"index;size:4;comment:other group"`
	// status
	Status int32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty" gorm:"default:1;size:2;comment:status 1 normal"`
	// created_at
	CreatedAt int64 `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" gorm:"index;comment:created at"`
	// updated_at
	UpdatedAt int64 `protobuf:"varint,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" gorm:"comment:updated at"`
	// deleted_at
	DeletedAt int64 `protobuf:"varint,22,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty" gorm:"comment:deleted at"`
}

func (m *Product) Reset()         { *m = Product{} }
func (m *Product) String() string { return proto.CompactTextString(m) }
func (*Product) ProtoMessage()    {}
func (*Product) Descriptor() ([]byte, []int) {
	return fileDescriptor_f0fd8b59378f44a5, []int{0}
}
func (m *Product) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Product) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Product.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Product) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Product.Merge(m, src)
}
func (m *Product) XXX_Size() int {
	return m.Size()
}
func (m *Product) XXX_DiscardUnknown() {
	xxx_messageInfo_Product.DiscardUnknown(m)
}

var xxx_messageInfo_Product proto.InternalMessageInfo

func (m *Product) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Product) GetPid() string {
	if m != nil {
		return m.Pid
	}
	return ""
}

func (m *Product) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Product) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *Product) GetCover() string {
	if m != nil {
		return m.Cover
	}
	return ""
}

func (m *Product) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *Product) GetSource() string {
	if m != nil {
		return m.Source
	}
	return ""
}

func (m *Product) GetOtherType() int32 {
	if m != nil {
		return m.OtherType
	}
	return 0
}

func (m *Product) GetOtherTag() int32 {
	if m != nil {
		return m.OtherTag
	}
	return 0
}

func (m *Product) GetOtherForm() int32 {
	if m != nil {
		return m.OtherForm
	}
	return 0
}

func (m *Product) GetOtherGroup() int32 {
	if m != nil {
		return m.OtherGroup
	}
	return 0
}

func (m *Product) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *Product) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Product) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Product) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Product)(nil), "Product")
}

func init() { proto.RegisterFile("product.proto", fileDescriptor_f0fd8b59378f44a5) }

var fileDescriptor_f0fd8b59378f44a5 = []byte{
	// 569 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x93, 0xc1, 0x4e, 0x14, 0x31,
	0x1c, 0xc6, 0x19, 0x36, 0xbb, 0xb0, 0x05, 0x2f, 0x15, 0x49, 0xd5, 0x38, 0x1d, 0x87, 0xa0, 0x0b,
	0x86, 0x25, 0x80, 0x09, 0x66, 0x31, 0x1a, 0xe6, 0x80, 0x21, 0x78, 0x30, 0x13, 0x4f, 0x5e, 0x48,
	0x99, 0x96, 0xa1, 0xc9, 0xce, 0x76, 0xec, 0xb6, 0xe2, 0xfa, 0x14, 0xbe, 0x91, 0x57, 0x8f, 0x1c,
	0x3d, 0x35, 0xca, 0xbe, 0x41, 0x4f, 0x1e, 0xcd, 0xb4, 0xb3, 0x20, 0x41, 0x42, 0x3c, 0xed, 0x7e,
	0xed, 0xf7, 0xfb, 0xe5, 0x3f, 0x9d, 0x0e, 0xb8, 0x53, 0x4a, 0x41, 0x75, 0xa6, 0xba, 0xa5, 0x14,
	0x4a, 0x3c, 0x58, 0xcb, 0xb9, 0x3a, 0xd1, 0x47, 0xdd, 0x4c, 0x14, 0xeb, 0xb9, 0xc8, 0xc5, 0xba,
	0x5b, 0x3e, 0xd2, 0xc7, 0x2e, 0xb9, 0xe0, 0xfe, 0xf9, 0x7a, 0xfc, 0x6d, 0x06, 0xcc, 0xbc, 0xf3,
	0x02, 0xf8, 0x0a, 0x4c, 0x73, 0x8a, 0x82, 0x28, 0xe8, 0x34, 0x92, 0xae, 0x35, 0x78, 0x35, 0x17,
	0xb2, 0xe8, 0xc5, 0xa5, 0xe4, 0x05, 0x91, 0xa3, 0x03, 0x36, 0xda, 0x21, 0x5a, 0x89, 0xfd, 0x41,
	0x26, 0x59, 0xc1, 0x06, 0x6a, 0x27, 0x13, 0x45, 0xf5, 0xdb, 0xe3, 0x34, 0x4e, 0xa7, 0x39, 0x85,
	0xaf, 0x41, 0xa3, 0xe4, 0x14, 0x4d, 0x47, 0x41, 0xa7, 0x9d, 0xac, 0x59, 0x83, 0x57, 0xbc, 0x40,
	0x0f, 0xf8, 0x47, 0xcd, 0x76, 0x86, 0xfc, 0x0b, 0xeb, 0x6d, 0x6c, 0xbe, 0xb8, 0xe0, 0xea, 0xc1,
	0xa3, 0x8a, 0xaf, 0x48, 0xb8, 0x0d, 0x1a, 0x9a, 0x53, 0xd4, 0x70, 0x82, 0x65, 0x6b, 0xf0, 0x63,
	0x2f, 0xe0, 0x03, 0xca, 0x3e, 0x5f, 0xe7, 0xb5, 0x03, 0x35, 0xa7, 0xb0, 0x0b, 0x9a, 0x8a, 0xab,
	0x3e, 0x43, 0x4d, 0x87, 0x22, 0x6b, 0xf0, 0x82, 0x47, 0x27, 0x5d, 0xb7, 0x1d, 0xa7, 0xbe, 0x56,
	0xf5, 0x33, 0xf1, 0x89, 0x49, 0xd4, 0xba, 0xa9, 0xef, 0xb6, 0xe3, 0xd4, 0xd7, 0x60, 0x07, 0x34,
	0x24, 0x39, 0x45, 0x33, 0x51, 0xd0, 0x99, 0x4f, 0x16, 0xad, 0xc1, 0xf0, 0x6a, 0x5b, 0x92, 0xd3,
	0x38, 0xad, 0x2a, 0x70, 0x1b, 0xb4, 0x86, 0x42, 0xcb, 0x8c, 0xa1, 0x59, 0xa7, 0xc6, 0xd6, 0xe0,
	0x87, 0x7f, 0x3f, 0xc5, 0x04, 0xf1, 0xad, 0x38, 0xad, 0xeb, 0x70, 0x1f, 0x00, 0xa1, 0x4e, 0x98,
	0x3c, 0x54, 0xa3, 0x92, 0xa1, 0x76, 0x14, 0x74, 0x9a, 0xc9, 0xaa, 0x35, 0xf8, 0xc9, 0xb5, 0x23,
	0x78, 0x7e, 0xe1, 0x70, 0x40, 0x54, 0x01, 0x71, 0xda, 0x76, 0xe1, 0xfd, 0xa8, 0x64, 0x70, 0x0f,
	0xb4, 0x6b, 0x15, 0xc9, 0x11, 0x70, 0xa6, 0x15, 0x6b, 0xf0, 0xf2, 0xed, 0x26, 0x92, 0xc7, 0xe9,
	0xac, 0x17, 0x91, 0xfc, 0x72, 0xa4, 0x63, 0x21, 0x0b, 0x34, 0xf7, 0x1f, 0x23, 0x55, 0xc0, 0x64,
	0xa4, 0x3d, 0x21, 0x0b, 0xf8, 0x16, 0xcc, 0x79, 0x55, 0x2e, 0x85, 0x2e, 0xd1, 0xbc, 0x73, 0x3d,
	0xb3, 0x06, 0x3f, 0xbd, 0xd5, 0xe5, 0x88, 0x38, 0xf5, 0xa3, 0xbc, 0xa9, 0x02, 0x3c, 0x00, 0xad,
	0xa1, 0x22, 0x4a, 0x0f, 0xd1, 0x5d, 0x27, 0xda, 0xb2, 0x06, 0xaf, 0x7b, 0x11, 0x65, 0xc7, 0x44,
	0xf7, 0x55, 0x6f, 0xc3, 0xcb, 0x36, 0x2f, 0xcf, 0xdb, 0x01, 0xd1, 0x46, 0x34, 0x10, 0xb2, 0x20,
	0xfd, 0xea, 0xe0, 0xdd, 0x0a, 0x4c, 0x00, 0xc8, 0x24, 0x23, 0x8a, 0xd1, 0x43, 0xa2, 0xd0, 0x82,
	0xbb, 0xfd, 0x4b, 0xd6, 0x60, 0xfc, 0xaf, 0xb7, 0x56, 0x37, 0x23, 0xa2, 0xe2, 0xb4, 0x5d, 0x87,
	0x5d, 0x05, 0x5f, 0x02, 0xa0, 0x4b, 0x3a, 0x71, 0xdc, 0x73, 0x8e, 0x47, 0xd6, 0xe0, 0xfb, 0x57,
	0xaf, 0x49, 0xdd, 0xf1, 0x74, 0x1d, 0x3c, 0x4d, 0x59, 0x9f, 0xd5, 0xf4, 0xe2, 0x4d, 0x74, 0xdd,
	0xf1, 0x74, 0x1d, 0x76, 0x55, 0xb2, 0xf4, 0xfb, 0x57, 0x18, 0x7c, 0x3f, 0x0f, 0x83, 0xb3, 0xf3,
	0x30, 0xf8, 0x79, 0x1e, 0x06, 0x5f, 0xc7, 0xe1, 0xd4, 0xd9, 0x38, 0x9c, 0xfa, 0x31, 0x0e, 0xa7,
	0x3e, 0x34, 0x0b, 0x41, 0x59, 0xff, 0xa8, 0xe5, 0xbe, 0xf6, 0xad, 0x3f, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x0e, 0xfb, 0xd8, 0xed, 0x2d, 0x04, 0x00, 0x00,
}

func (m *Product) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Product) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Product) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CreatedAt != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Status != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if m.OtherGroup != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.OtherGroup))
		i--
		dAtA[i] = 0x60
	}
	if m.OtherForm != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.OtherForm))
		i--
		dAtA[i] = 0x58
	}
	if m.OtherTag != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.OtherTag))
		i--
		dAtA[i] = 0x50
	}
	if m.OtherType != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.OtherType))
		i--
		dAtA[i] = 0x48
	}
	if len(m.Source) > 0 {
		i -= len(m.Source)
		copy(dAtA[i:], m.Source)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Source)))
		i--
		dAtA[i] = 0x42
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Cover) > 0 {
		i -= len(m.Cover)
		copy(dAtA[i:], m.Cover)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Cover)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pid) > 0 {
		i -= len(m.Pid)
		copy(dAtA[i:], m.Pid)
		i = encodeVarintProduct(dAtA, i, uint64(len(m.Pid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintProduct(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProduct(dAtA []byte, offset int, v uint64) int {
	offset -= sovProduct(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedProduct(r randyProduct, easy bool) *Product {
	this := &Product{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Pid = string(randStringProduct(r))
	this.Uid = string(randStringProduct(r))
	this.Title = string(randStringProduct(r))
	this.Cover = string(randStringProduct(r))
	v1 := r.Intn(100)
	this.Raw = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Raw[i] = byte(r.Intn(256))
	}
	this.Source = string(randStringProduct(r))
	this.OtherType = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OtherType *= -1
	}
	this.OtherTag = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OtherTag *= -1
	}
	this.OtherForm = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OtherForm *= -1
	}
	this.OtherGroup = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.OtherGroup *= -1
	}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	this.DeletedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DeletedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyProduct interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneProduct(r randyProduct) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringProduct(r randyProduct) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneProduct(r)
	}
	return string(tmps)
}
func randUnrecognizedProduct(r randyProduct, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldProduct(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldProduct(dAtA []byte, r randyProduct, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateProduct(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateProduct(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Product) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovProduct(uint64(m.Id))
	}
	l = len(m.Pid)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Cover)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	l = len(m.Source)
	if l > 0 {
		n += 1 + l + sovProduct(uint64(l))
	}
	if m.OtherType != 0 {
		n += 1 + sovProduct(uint64(m.OtherType))
	}
	if m.OtherTag != 0 {
		n += 1 + sovProduct(uint64(m.OtherTag))
	}
	if m.OtherForm != 0 {
		n += 1 + sovProduct(uint64(m.OtherForm))
	}
	if m.OtherGroup != 0 {
		n += 1 + sovProduct(uint64(m.OtherGroup))
	}
	if m.Status != 0 {
		n += 2 + sovProduct(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovProduct(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovProduct(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 2 + sovProduct(uint64(m.DeletedAt))
	}
	return n
}

func sovProduct(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProduct(x uint64) (n int) {
	return sovProduct(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Product) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Product: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Product: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cover", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cover = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Source", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProduct
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProduct
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Source = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherType", wireType)
			}
			m.OtherType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherType |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherTag", wireType)
			}
			m.OtherTag = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherTag |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherForm", wireType)
			}
			m.OtherForm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherForm |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OtherGroup", wireType)
			}
			m.OtherGroup = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OtherGroup |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProduct(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProduct
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProduct(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProduct
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProduct
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProduct
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProduct
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProduct
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProduct        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProduct          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProduct = fmt.Errorf("proto: unexpected end of group")
)
