// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: article_comment.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// ArticleComment
type ArticleComment struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"primaryKey;autoIncrement;comment:id"`
	// aid
	Aid int64 `protobuf:"varint,2,opt,name=aid,proto3" json:"aid,omitempty" gorm:"index;size:128;comment:article id"`
	// comment id
	Cid int64 `protobuf:"varint,3,opt,name=cid,proto3" json:"cid,omitempty" gorm:"unique;size:128;comment:comment id"`
	// discussion count
	DiscussionCount int64 `protobuf:"varint,4,opt,name=discussion_count,json=discussionCount,proto3" json:"discussion_count,omitempty" gorm:"index;comment:discussion count"`
	// like count
	LikeCount int64 `protobuf:"varint,5,opt,name=like_count,json=likeCount,proto3" json:"like_count,omitempty" gorm:"index;comment:like count"`
	// comment ctime
	CommentCtime int64 `protobuf:"varint,6,opt,name=comment_ctime,json=commentCtime,proto3" json:"comment_ctime,omitempty" gorm:"index;comment:comment_ctime"`
	// raw
	Raw []byte `protobuf:"bytes,7,opt,name=raw,proto3" json:"raw,omitempty" gorm:"comment:raw"`
	// status
	Status int32 `protobuf:"varint,19,opt,name=status,proto3" json:"status,omitempty" gorm:"default:1;size:2;comment:status 1 normal"`
	// created_at
	CreatedAt int64 `protobuf:"varint,20,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" gorm:"index;comment:created at"`
	// updated_at
	UpdatedAt int64 `protobuf:"varint,21,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" gorm:"comment:updated at"`
	// deleted_at
	DeletedAt int64 `protobuf:"varint,22,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty" gorm:"comment:deleted at"`
}

func (m *ArticleComment) Reset()         { *m = ArticleComment{} }
func (m *ArticleComment) String() string { return proto.CompactTextString(m) }
func (*ArticleComment) ProtoMessage()    {}
func (*ArticleComment) Descriptor() ([]byte, []int) {
	return fileDescriptor_22a8b7efda178d20, []int{0}
}
func (m *ArticleComment) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ArticleComment) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ArticleComment.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ArticleComment) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ArticleComment.Merge(m, src)
}
func (m *ArticleComment) XXX_Size() int {
	return m.Size()
}
func (m *ArticleComment) XXX_DiscardUnknown() {
	xxx_messageInfo_ArticleComment.DiscardUnknown(m)
}

var xxx_messageInfo_ArticleComment proto.InternalMessageInfo

func (m *ArticleComment) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *ArticleComment) GetAid() int64 {
	if m != nil {
		return m.Aid
	}
	return 0
}

func (m *ArticleComment) GetCid() int64 {
	if m != nil {
		return m.Cid
	}
	return 0
}

func (m *ArticleComment) GetDiscussionCount() int64 {
	if m != nil {
		return m.DiscussionCount
	}
	return 0
}

func (m *ArticleComment) GetLikeCount() int64 {
	if m != nil {
		return m.LikeCount
	}
	return 0
}

func (m *ArticleComment) GetCommentCtime() int64 {
	if m != nil {
		return m.CommentCtime
	}
	return 0
}

func (m *ArticleComment) GetRaw() []byte {
	if m != nil {
		return m.Raw
	}
	return nil
}

func (m *ArticleComment) GetStatus() int32 {
	if m != nil {
		return m.Status
	}
	return 0
}

func (m *ArticleComment) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *ArticleComment) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *ArticleComment) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*ArticleComment)(nil), "ArticleComment")
}

func init() { proto.RegisterFile("article_comment.proto", fileDescriptor_22a8b7efda178d20) }

var fileDescriptor_22a8b7efda178d20 = []byte{
	// 494 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x93, 0x4d, 0x6f, 0xd3, 0x3e,
	0x1c, 0xc7, 0x9b, 0xf6, 0xdf, 0xfe, 0x85, 0x35, 0x1e, 0x14, 0xd8, 0x14, 0x90, 0x88, 0xa3, 0x4c,
	0xa0, 0x0c, 0xb1, 0x56, 0xdd, 0x2e, 0xa8, 0x45, 0x43, 0x4d, 0x4f, 0xa8, 0xb7, 0x88, 0x13, 0x97,
	0xca, 0xb5, 0xbd, 0x62, 0x91, 0xc4, 0xc5, 0xb1, 0x35, 0xc6, 0xab, 0xe0, 0x65, 0x71, 0xdc, 0x91,
	0x53, 0x04, 0xed, 0x0b, 0x40, 0xca, 0x89, 0x23, 0xf2, 0x43, 0x37, 0x26, 0x06, 0xa7, 0xe4, 0xfb,
	0xd3, 0xf7, 0xf3, 0x71, 0xfc, 0x93, 0x02, 0x76, 0x91, 0x90, 0x0c, 0xe7, 0x74, 0x8e, 0x79, 0x51,
	0xd0, 0x52, 0xf6, 0x57, 0x82, 0x4b, 0xfe, 0xe8, 0x70, 0xc9, 0xe4, 0x3b, 0xb5, 0xe8, 0x63, 0x5e,
	0x0c, 0x96, 0x7c, 0xc9, 0x07, 0x66, 0xbc, 0x50, 0xa7, 0x26, 0x99, 0x60, 0xde, 0x6c, 0x3d, 0xfe,
	0xd1, 0x05, 0x77, 0x26, 0x56, 0x34, 0xb5, 0x1e, 0xff, 0x04, 0xb4, 0x19, 0x09, 0xbc, 0xc8, 0x4b,
	0x3a, 0x69, 0xbf, 0xa9, 0xe1, 0xb3, 0x25, 0x17, 0xc5, 0x28, 0x5e, 0x09, 0x56, 0x20, 0x71, 0x3e,
	0xa3, 0xe7, 0x63, 0xa4, 0x24, 0x7f, 0x5d, 0x62, 0x41, 0x75, 0x7f, 0xec, 0xce, 0x1f, 0x31, 0x12,
	0x67, 0x6d, 0x46, 0xfc, 0x13, 0xd0, 0x41, 0x8c, 0x04, 0x6d, 0x23, 0x78, 0xde, 0xd4, 0x30, 0xb1,
	0x02, 0x56, 0x12, 0xfa, 0x71, 0x5c, 0xb1, 0x4f, 0x74, 0x34, 0x3c, 0x7a, 0x71, 0x89, 0xb9, 0x6b,
	0x44, 0x1a, 0xd7, 0xa0, 0xff, 0x0a, 0x74, 0x30, 0x23, 0x41, 0xc7, 0xf0, 0x87, 0x4d, 0x0d, 0x0f,
	0x2c, 0xaf, 0x4a, 0xf6, 0x41, 0xd1, 0x3f, 0x05, 0xee, 0x69, 0x05, 0x98, 0x11, 0xff, 0x0d, 0xb8,
	0x47, 0x58, 0x85, 0x55, 0x55, 0x31, 0x5e, 0xce, 0x31, 0x57, 0xa5, 0x0c, 0xfe, 0x33, 0xb6, 0x83,
	0xa6, 0x86, 0x4f, 0x7e, 0xff, 0x9a, 0xad, 0xe3, 0xaa, 0x1f, 0x99, 0x7e, 0x9c, 0xdd, 0xbd, 0x1a,
	0x4d, 0xf5, 0xc4, 0x4f, 0x01, 0xc8, 0xd9, 0x7b, 0xea, 0x7c, 0x5d, 0xe3, 0xdb, 0x6f, 0x6a, 0x08,
	0x6f, 0xf2, 0xe9, 0xe6, 0xd6, 0x74, 0x4b, 0x07, 0xeb, 0x98, 0x81, 0xdb, 0xae, 0x31, 0xc7, 0x92,
	0x15, 0x34, 0xe8, 0x19, 0xcd, 0xd3, 0xa6, 0x86, 0xf1, 0x4d, 0x9a, 0x6b, 0xe5, 0x38, 0xdb, 0x71,
	0x79, 0xaa, 0xa3, 0x9f, 0x80, 0x8e, 0x40, 0x67, 0xc1, 0xff, 0x91, 0x97, 0xec, 0xa4, 0x7b, 0x4d,
	0x0d, 0x7d, 0xab, 0xd8, 0xc2, 0x02, 0x9d, 0xc5, 0x99, 0xae, 0xf8, 0x33, 0xd0, 0xab, 0x24, 0x92,
	0xaa, 0x0a, 0xee, 0x47, 0x5e, 0xd2, 0x4d, 0x8f, 0x9b, 0x1a, 0x0e, 0x6c, 0x99, 0xd0, 0x53, 0xa4,
	0x72, 0x39, 0x1a, 0xda, 0xbd, 0x1e, 0x5d, 0x1e, 0x6d, 0x81, 0x68, 0x18, 0x95, 0x5c, 0x14, 0x28,
	0x8f, 0x33, 0xa7, 0xd0, 0x7b, 0xc0, 0x82, 0x22, 0x49, 0xc9, 0x1c, 0xc9, 0xe0, 0xc1, 0xbf, 0xf7,
	0xe0, 0x9a, 0x11, 0xd2, 0x7b, 0x70, 0x61, 0x22, 0xfd, 0x97, 0x00, 0xa8, 0x15, 0xd9, 0x3a, 0x76,
	0x8d, 0xe3, 0x71, 0x53, 0xc3, 0x87, 0xd7, 0x6f, 0xe0, 0x3a, 0x96, 0x76, 0xc1, 0xd2, 0x84, 0xe6,
	0xd4, 0xd1, 0x7b, 0x7f, 0xa3, 0x5d, 0xc7, 0xd2, 0x2e, 0x4c, 0x64, 0xba, 0xff, 0xf3, 0x7b, 0xe8,
	0x7d, 0x59, 0x87, 0xde, 0xc5, 0x3a, 0xf4, 0xbe, 0xad, 0x43, 0xef, 0xf3, 0x26, 0x6c, 0x5d, 0x6c,
	0xc2, 0xd6, 0xd7, 0x4d, 0xd8, 0x7a, 0xdb, 0x2d, 0x38, 0xa1, 0xf9, 0xa2, 0x67, 0xfe, 0x8e, 0xe3,
	0x5f, 0x01, 0x00, 0x00, 0xff, 0xff, 0x17, 0xb5, 0x43, 0x28, 0x65, 0x03, 0x00, 0x00,
}

func (m *ArticleComment) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ArticleComment) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ArticleComment) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xb0
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa8
	}
	if m.CreatedAt != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if m.Status != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.Status))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0x98
	}
	if len(m.Raw) > 0 {
		i -= len(m.Raw)
		copy(dAtA[i:], m.Raw)
		i = encodeVarintArticleComment(dAtA, i, uint64(len(m.Raw)))
		i--
		dAtA[i] = 0x3a
	}
	if m.CommentCtime != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.CommentCtime))
		i--
		dAtA[i] = 0x30
	}
	if m.LikeCount != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.LikeCount))
		i--
		dAtA[i] = 0x28
	}
	if m.DiscussionCount != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.DiscussionCount))
		i--
		dAtA[i] = 0x20
	}
	if m.Cid != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.Cid))
		i--
		dAtA[i] = 0x18
	}
	if m.Aid != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.Aid))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = encodeVarintArticleComment(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintArticleComment(dAtA []byte, offset int, v uint64) int {
	offset -= sovArticleComment(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedArticleComment(r randyArticleComment, easy bool) *ArticleComment {
	this := &ArticleComment{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Aid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Aid *= -1
	}
	this.Cid = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Cid *= -1
	}
	this.DiscussionCount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DiscussionCount *= -1
	}
	this.LikeCount = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.LikeCount *= -1
	}
	this.CommentCtime = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CommentCtime *= -1
	}
	v1 := r.Intn(100)
	this.Raw = make([]byte, v1)
	for i := 0; i < v1; i++ {
		this.Raw[i] = byte(r.Intn(256))
	}
	this.Status = int32(r.Int31())
	if r.Intn(2) == 0 {
		this.Status *= -1
	}
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	this.DeletedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DeletedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyArticleComment interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneArticleComment(r randyArticleComment) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringArticleComment(r randyArticleComment) string {
	v2 := r.Intn(100)
	tmps := make([]rune, v2)
	for i := 0; i < v2; i++ {
		tmps[i] = randUTF8RuneArticleComment(r)
	}
	return string(tmps)
}
func randUnrecognizedArticleComment(r randyArticleComment, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldArticleComment(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldArticleComment(dAtA []byte, r randyArticleComment, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateArticleComment(dAtA, uint64(key))
		v3 := r.Int63()
		if r.Intn(2) == 0 {
			v3 *= -1
		}
		dAtA = encodeVarintPopulateArticleComment(dAtA, uint64(v3))
	case 1:
		dAtA = encodeVarintPopulateArticleComment(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateArticleComment(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateArticleComment(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateArticleComment(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateArticleComment(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *ArticleComment) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovArticleComment(uint64(m.Id))
	}
	if m.Aid != 0 {
		n += 1 + sovArticleComment(uint64(m.Aid))
	}
	if m.Cid != 0 {
		n += 1 + sovArticleComment(uint64(m.Cid))
	}
	if m.DiscussionCount != 0 {
		n += 1 + sovArticleComment(uint64(m.DiscussionCount))
	}
	if m.LikeCount != 0 {
		n += 1 + sovArticleComment(uint64(m.LikeCount))
	}
	if m.CommentCtime != 0 {
		n += 1 + sovArticleComment(uint64(m.CommentCtime))
	}
	l = len(m.Raw)
	if l > 0 {
		n += 1 + l + sovArticleComment(uint64(l))
	}
	if m.Status != 0 {
		n += 2 + sovArticleComment(uint64(m.Status))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovArticleComment(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovArticleComment(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 2 + sovArticleComment(uint64(m.DeletedAt))
	}
	return n
}

func sovArticleComment(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozArticleComment(x uint64) (n int) {
	return sovArticleComment(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ArticleComment) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowArticleComment
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ArticleComment: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ArticleComment: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Aid", wireType)
			}
			m.Aid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Aid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cid", wireType)
			}
			m.Cid = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Cid |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DiscussionCount", wireType)
			}
			m.DiscussionCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DiscussionCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LikeCount", wireType)
			}
			m.LikeCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LikeCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CommentCtime", wireType)
			}
			m.CommentCtime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CommentCtime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthArticleComment
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthArticleComment
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Raw = append(m.Raw[:0], dAtA[iNdEx:postIndex]...)
			if m.Raw == nil {
				m.Raw = []byte{}
			}
			iNdEx = postIndex
		case 19:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Status |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 21:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 22:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipArticleComment(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthArticleComment
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipArticleComment(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowArticleComment
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowArticleComment
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthArticleComment
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupArticleComment
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthArticleComment
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthArticleComment        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowArticleComment          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupArticleComment = fmt.Errorf("proto: unexpected end of group")
)
