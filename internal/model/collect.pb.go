// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: collect.proto

package model

import (
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Collect
type Collect struct {
	// id
	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty" gorm:"index:,priority:3,composite:idx_tasks_status_deleted_at_id;primaryKey;autoIncrement;comment:id"`
	// uid
	Uid string `protobuf:"bytes,2,opt,name=uid,proto3" json:"uid,omitempty" gorm:"index:,unique,composite:user_collect;comment:uid"`
	// collect id
	CollectId string `protobuf:"bytes,3,opt,name=collect_id,json=collectId,proto3" json:"collect_id,omitempty" gorm:"index:,unique,composite:user_collect;comment:collect id"`
	// collect type
	CollectType string `protobuf:"bytes,4,opt,name=collect_type,json=collectType,proto3" json:"collect_type,omitempty" gorm:"index:,unique,composite:user_collect;comment:collect type"`
	// category
	Category string `protobuf:"bytes,5,opt,name=category,proto3" json:"category,omitempty" gorm:"index;comment:category"`
	// created_at
	CreatedAt int64 `protobuf:"varint,25,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" gorm:"index;comment:created at"`
	// updated_at
	UpdatedAt int64 `protobuf:"varint,26,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" gorm:"index;comment:updated at"`
	// deleted_at
	DeletedAt int64 `protobuf:"varint,27,opt,name=deleted_at,json=deletedAt,proto3" json:"deleted_at,omitempty" gorm:"index:,comment:deleted at"`
}

func (m *Collect) Reset()         { *m = Collect{} }
func (m *Collect) String() string { return proto.CompactTextString(m) }
func (*Collect) ProtoMessage()    {}
func (*Collect) Descriptor() ([]byte, []int) {
	return fileDescriptor_37ca5d531a1e5e54, []int{0}
}
func (m *Collect) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Collect) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Collect.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Collect) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Collect.Merge(m, src)
}
func (m *Collect) XXX_Size() int {
	return m.Size()
}
func (m *Collect) XXX_DiscardUnknown() {
	xxx_messageInfo_Collect.DiscardUnknown(m)
}

var xxx_messageInfo_Collect proto.InternalMessageInfo

func (m *Collect) GetId() int64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Collect) GetUid() string {
	if m != nil {
		return m.Uid
	}
	return ""
}

func (m *Collect) GetCollectId() string {
	if m != nil {
		return m.CollectId
	}
	return ""
}

func (m *Collect) GetCollectType() string {
	if m != nil {
		return m.CollectType
	}
	return ""
}

func (m *Collect) GetCategory() string {
	if m != nil {
		return m.Category
	}
	return ""
}

func (m *Collect) GetCreatedAt() int64 {
	if m != nil {
		return m.CreatedAt
	}
	return 0
}

func (m *Collect) GetUpdatedAt() int64 {
	if m != nil {
		return m.UpdatedAt
	}
	return 0
}

func (m *Collect) GetDeletedAt() int64 {
	if m != nil {
		return m.DeletedAt
	}
	return 0
}

func init() {
	proto.RegisterType((*Collect)(nil), "Collect")
}

func init() { proto.RegisterFile("collect.proto", fileDescriptor_37ca5d531a1e5e54) }

var fileDescriptor_37ca5d531a1e5e54 = []byte{
	// 435 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x92, 0xb1, 0x6e, 0xd3, 0x40,
	0x18, 0xc7, 0xe3, 0x84, 0x00, 0x3d, 0x60, 0xf1, 0x64, 0x8a, 0xb0, 0x8d, 0xcb, 0xd0, 0xa1, 0xb4,
	0x43, 0x07, 0x24, 0x47, 0x20, 0xe2, 0xb2, 0x54, 0x88, 0x25, 0x62, 0x62, 0xb1, 0x2e, 0x77, 0x1f,
	0xe6, 0x44, 0xec, 0x33, 0xe7, 0xef, 0xa4, 0xfa, 0x2d, 0x78, 0x0f, 0x5e, 0x84, 0xb1, 0x23, 0x93,
	0x05, 0xc9, 0x1b, 0x78, 0x62, 0x44, 0x77, 0xbe, 0xb4, 0x8d, 0x84, 0x18, 0x60, 0xb2, 0x7f, 0xf6,
	0xdf, 0xbf, 0xbf, 0xce, 0xdf, 0x47, 0x1e, 0x30, 0xb9, 0x5a, 0x01, 0xc3, 0xe3, 0x5a, 0x49, 0x94,
	0xfb, 0xcf, 0x0a, 0x81, 0x1f, 0xf5, 0xf2, 0x98, 0xc9, 0xf2, 0xa4, 0x90, 0x85, 0x3c, 0xb1, 0x8f,
	0x97, 0xfa, 0x83, 0x25, 0x0b, 0xf6, 0x6e, 0x88, 0x27, 0x5f, 0xa7, 0xe4, 0xce, 0xd9, 0x20, 0xf0,
	0x5b, 0x32, 0x16, 0x3c, 0xf0, 0x62, 0xef, 0x70, 0x92, 0x89, 0xbe, 0x8b, 0xa0, 0x90, 0xaa, 0x4c,
	0x13, 0x51, 0x71, 0xb8, 0x48, 0x8f, 0x6a, 0x25, 0xa4, 0x12, 0xd8, 0xa6, 0xa7, 0x47, 0x4c, 0x96,
	0xb5, 0x6c, 0x04, 0x42, 0x2a, 0xf8, 0x45, 0x8e, 0xb4, 0xf9, 0xd4, 0xe4, 0x0d, 0x52, 0xd4, 0x4d,
	0xce, 0x61, 0x05, 0x08, 0x3c, 0xa7, 0x98, 0x0b, 0x3e, 0xab, 0x95, 0x28, 0xa9, 0x6a, 0xdf, 0x40,
	0x3b, 0xa3, 0x1a, 0xe5, 0x79, 0xc5, 0x14, 0x94, 0x50, 0xe1, 0x8c, 0xc9, 0xd2, 0x5c, 0x53, 0xc1,
	0x93, 0xc5, 0x58, 0x70, 0xff, 0x2d, 0x99, 0x68, 0xc1, 0x83, 0x71, 0xec, 0x1d, 0xee, 0x65, 0xb3,
	0xbe, 0x8b, 0x9e, 0xef, 0x74, 0xeb, 0x4a, 0x7c, 0xd6, 0x70, 0xa3, 0x57, 0x37, 0xa0, 0x72, 0x77,
	0xf0, 0x2b, 0x99, 0x36, 0x36, 0xe3, 0xf1, 0x29, 0x21, 0xee, 0x65, 0x2e, 0x78, 0x30, 0xb1, 0xd6,
	0xac, 0xef, 0xa2, 0x97, 0xff, 0x60, 0x75, 0x1c, 0x1b, 0xf9, 0x9e, 0x83, 0x73, 0xee, 0x17, 0xe4,
	0xfe, 0xb6, 0x02, 0xdb, 0x1a, 0x82, 0x5b, 0xb6, 0xe4, 0x75, 0xdf, 0x45, 0xaf, 0xfe, 0xa3, 0xc4,
	0xa8, 0x92, 0xc5, 0x3d, 0x87, 0xef, 0xda, 0x1a, 0xfc, 0x17, 0xe4, 0x2e, 0xa3, 0x68, 0x66, 0xd1,
	0x06, 0x53, 0x5b, 0xf2, 0xa4, 0xef, 0xa2, 0xc7, 0x37, 0x4a, 0xae, 0x2d, 0x2e, 0x97, 0x2c, 0xae,
	0x3e, 0xf1, 0x33, 0x42, 0x98, 0x02, 0x3a, 0xcc, 0x24, 0x78, 0x68, 0x87, 0x7b, 0xd0, 0x77, 0x51,
	0xf4, 0x47, 0xc1, 0x90, 0x8c, 0x29, 0x9a, 0xb3, 0x0e, 0x30, 0x47, 0xe3, 0xd0, 0x35, 0xdf, 0x3a,
	0xf6, 0xff, 0xee, 0x70, 0xc9, 0xc1, 0xe1, 0x60, 0x8e, 0xfe, 0x19, 0x21, 0xd7, 0xbb, 0x11, 0x3c,
	0xb2, 0x8e, 0xa7, 0x7d, 0x17, 0xc5, 0x3b, 0x7f, 0x6b, 0x2b, 0x71, 0xd1, 0x41, 0xe2, 0x60, 0x8e,
	0xd9, 0xc1, 0xaf, 0x9f, 0xa1, 0xf7, 0x6d, 0x1d, 0x7a, 0x97, 0xeb, 0xd0, 0xfb, 0xb1, 0x0e, 0xbd,
	0x2f, 0x9b, 0x70, 0x74, 0xb9, 0x09, 0x47, 0xdf, 0x37, 0xe1, 0xe8, 0xfd, 0xb4, 0x94, 0x1c, 0x56,
	0xcb, 0xdb, 0x76, 0xb3, 0x4f, 0x7f, 0x07, 0x00, 0x00, 0xff, 0xff, 0x77, 0xee, 0xc2, 0x30, 0x19,
	0x03, 0x00, 0x00,
}

func (m *Collect) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Collect) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Collect) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.DeletedAt != 0 {
		i = encodeVarintCollect(dAtA, i, uint64(m.DeletedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd8
	}
	if m.UpdatedAt != 0 {
		i = encodeVarintCollect(dAtA, i, uint64(m.UpdatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xd0
	}
	if m.CreatedAt != 0 {
		i = encodeVarintCollect(dAtA, i, uint64(m.CreatedAt))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xc8
	}
	if len(m.Category) > 0 {
		i -= len(m.Category)
		copy(dAtA[i:], m.Category)
		i = encodeVarintCollect(dAtA, i, uint64(len(m.Category)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CollectType) > 0 {
		i -= len(m.CollectType)
		copy(dAtA[i:], m.CollectType)
		i = encodeVarintCollect(dAtA, i, uint64(len(m.CollectType)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.CollectId) > 0 {
		i -= len(m.CollectId)
		copy(dAtA[i:], m.CollectId)
		i = encodeVarintCollect(dAtA, i, uint64(len(m.CollectId)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Uid) > 0 {
		i -= len(m.Uid)
		copy(dAtA[i:], m.Uid)
		i = encodeVarintCollect(dAtA, i, uint64(len(m.Uid)))
		i--
		dAtA[i] = 0x12
	}
	if m.Id != 0 {
		i = encodeVarintCollect(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintCollect(dAtA []byte, offset int, v uint64) int {
	offset -= sovCollect(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func NewPopulatedCollect(r randyCollect, easy bool) *Collect {
	this := &Collect{}
	this.Id = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.Id *= -1
	}
	this.Uid = string(randStringCollect(r))
	this.CollectId = string(randStringCollect(r))
	this.CollectType = string(randStringCollect(r))
	this.Category = string(randStringCollect(r))
	this.CreatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.CreatedAt *= -1
	}
	this.UpdatedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.UpdatedAt *= -1
	}
	this.DeletedAt = int64(r.Int63())
	if r.Intn(2) == 0 {
		this.DeletedAt *= -1
	}
	if !easy && r.Intn(10) != 0 {
	}
	return this
}

type randyCollect interface {
	Float32() float32
	Float64() float64
	Int63() int64
	Int31() int32
	Uint32() uint32
	Intn(n int) int
}

func randUTF8RuneCollect(r randyCollect) rune {
	ru := r.Intn(62)
	if ru < 10 {
		return rune(ru + 48)
	} else if ru < 36 {
		return rune(ru + 55)
	}
	return rune(ru + 61)
}
func randStringCollect(r randyCollect) string {
	v1 := r.Intn(100)
	tmps := make([]rune, v1)
	for i := 0; i < v1; i++ {
		tmps[i] = randUTF8RuneCollect(r)
	}
	return string(tmps)
}
func randUnrecognizedCollect(r randyCollect, maxFieldNumber int) (dAtA []byte) {
	l := r.Intn(5)
	for i := 0; i < l; i++ {
		wire := r.Intn(4)
		if wire == 3 {
			wire = 5
		}
		fieldNumber := maxFieldNumber + r.Intn(100)
		dAtA = randFieldCollect(dAtA, r, fieldNumber, wire)
	}
	return dAtA
}
func randFieldCollect(dAtA []byte, r randyCollect, fieldNumber int, wire int) []byte {
	key := uint32(fieldNumber)<<3 | uint32(wire)
	switch wire {
	case 0:
		dAtA = encodeVarintPopulateCollect(dAtA, uint64(key))
		v2 := r.Int63()
		if r.Intn(2) == 0 {
			v2 *= -1
		}
		dAtA = encodeVarintPopulateCollect(dAtA, uint64(v2))
	case 1:
		dAtA = encodeVarintPopulateCollect(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	case 2:
		dAtA = encodeVarintPopulateCollect(dAtA, uint64(key))
		ll := r.Intn(100)
		dAtA = encodeVarintPopulateCollect(dAtA, uint64(ll))
		for j := 0; j < ll; j++ {
			dAtA = append(dAtA, byte(r.Intn(256)))
		}
	default:
		dAtA = encodeVarintPopulateCollect(dAtA, uint64(key))
		dAtA = append(dAtA, byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)), byte(r.Intn(256)))
	}
	return dAtA
}
func encodeVarintPopulateCollect(dAtA []byte, v uint64) []byte {
	for v >= 1<<7 {
		dAtA = append(dAtA, uint8(uint64(v)&0x7f|0x80))
		v >>= 7
	}
	dAtA = append(dAtA, uint8(v))
	return dAtA
}
func (m *Collect) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + sovCollect(uint64(m.Id))
	}
	l = len(m.Uid)
	if l > 0 {
		n += 1 + l + sovCollect(uint64(l))
	}
	l = len(m.CollectId)
	if l > 0 {
		n += 1 + l + sovCollect(uint64(l))
	}
	l = len(m.CollectType)
	if l > 0 {
		n += 1 + l + sovCollect(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovCollect(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 2 + sovCollect(uint64(m.CreatedAt))
	}
	if m.UpdatedAt != 0 {
		n += 2 + sovCollect(uint64(m.UpdatedAt))
	}
	if m.DeletedAt != 0 {
		n += 2 + sovCollect(uint64(m.DeletedAt))
	}
	return n
}

func sovCollect(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozCollect(x uint64) (n int) {
	return sovCollect(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Collect) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowCollect
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Collect: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Collect: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Uid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Uid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CollectType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CollectType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthCollect
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthCollect
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 25:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CreatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 26:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UpdatedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 27:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeletedAt", wireType)
			}
			m.DeletedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.DeletedAt |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipCollect(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthCollect
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipCollect(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowCollect
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowCollect
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthCollect
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupCollect
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthCollect
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthCollect        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowCollect          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupCollect = fmt.Errorf("proto: unexpected end of group")
)
